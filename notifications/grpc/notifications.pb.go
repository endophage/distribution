// Code generated by protoc-gen-go.
// source: notifications.proto
// DO NOT EDIT!

/*
Package notifications is a generated protocol buffer package.

It is generated from these files:
	notifications.proto

It has these top-level messages:
	Events
	Event
	TargetMessage
	DescriptorMessage
	ActorRecordMessage
	RequestRecordMessage
	SourceRecordMessage
	Void
*/
package grpc

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type Events struct {
	Events []*Event `protobuf:"bytes,1,rep" json:"Events,omitempty"`
}

func (m *Events) Reset()         { *m = Events{} }
func (m *Events) String() string { return proto.CompactTextString(m) }
func (*Events) ProtoMessage()    {}

func (m *Events) GetEvents() []*Event {
	if m != nil {
		return m.Events
	}
	return nil
}

type Event struct {
	ID        string                `protobuf:"bytes,1,opt" json:"ID,omitempty"`
	Timestamp int64                 `protobuf:"varint,2,opt" json:"Timestamp,omitempty"`
	Action    string                `protobuf:"bytes,3,opt" json:"Action,omitempty"`
	Target    *TargetMessage        `protobuf:"bytes,4,opt" json:"Target,omitempty"`
	Request   *RequestRecordMessage `protobuf:"bytes,5,opt" json:"Request,omitempty"`
	Actor     *ActorRecordMessage   `protobuf:"bytes,6,opt" json:"Actor,omitempty"`
	Source    *SourceRecordMessage  `protobuf:"bytes,7,opt" json:"Source,omitempty"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}

func (m *Event) GetTarget() *TargetMessage {
	if m != nil {
		return m.Target
	}
	return nil
}

func (m *Event) GetRequest() *RequestRecordMessage {
	if m != nil {
		return m.Request
	}
	return nil
}

func (m *Event) GetActor() *ActorRecordMessage {
	if m != nil {
		return m.Actor
	}
	return nil
}

func (m *Event) GetSource() *SourceRecordMessage {
	if m != nil {
		return m.Source
	}
	return nil
}

type TargetMessage struct {
	Descriptor_ *DescriptorMessage `protobuf:"bytes,1,opt" json:"Descriptor,omitempty"`
	Repository  string             `protobuf:"bytes,2,opt" json:"Repository,omitempty"`
	URL         string             `protobuf:"bytes,3,opt" json:"URL,omitempty"`
}

func (m *TargetMessage) Reset()         { *m = TargetMessage{} }
func (m *TargetMessage) String() string { return proto.CompactTextString(m) }
func (*TargetMessage) ProtoMessage()    {}

func (m *TargetMessage) GetDescriptor_() *DescriptorMessage {
	if m != nil {
		return m.Descriptor_
	}
	return nil
}

type DescriptorMessage struct {
	MediaType string `protobuf:"bytes,1,opt" json:"MediaType,omitempty"`
	Length    int64  `protobuf:"varint,2,opt" json:"Length,omitempty"`
	Digest    string `protobuf:"bytes,3,opt" json:"Digest,omitempty"`
}

func (m *DescriptorMessage) Reset()         { *m = DescriptorMessage{} }
func (m *DescriptorMessage) String() string { return proto.CompactTextString(m) }
func (*DescriptorMessage) ProtoMessage()    {}

type ActorRecordMessage struct {
	Name string `protobuf:"bytes,1,opt" json:"Name,omitempty"`
}

func (m *ActorRecordMessage) Reset()         { *m = ActorRecordMessage{} }
func (m *ActorRecordMessage) String() string { return proto.CompactTextString(m) }
func (*ActorRecordMessage) ProtoMessage()    {}

type RequestRecordMessage struct {
	ID        string `protobuf:"bytes,1,opt" json:"ID,omitempty"`
	Addr      string `protobuf:"bytes,2,opt" json:"Addr,omitempty"`
	Host      string `protobuf:"bytes,3,opt" json:"Host,omitempty"`
	Method    string `protobuf:"bytes,4,opt" json:"Method,omitempty"`
	UserAgent string `protobuf:"bytes,5,opt" json:"UserAgent,omitempty"`
}

func (m *RequestRecordMessage) Reset()         { *m = RequestRecordMessage{} }
func (m *RequestRecordMessage) String() string { return proto.CompactTextString(m) }
func (*RequestRecordMessage) ProtoMessage()    {}

type SourceRecordMessage struct {
	Addr       string `protobuf:"bytes,1,opt" json:"Addr,omitempty"`
	InstanceID string `protobuf:"bytes,2,opt" json:"InstanceID,omitempty"`
}

func (m *SourceRecordMessage) Reset()         { *m = SourceRecordMessage{} }
func (m *SourceRecordMessage) String() string { return proto.CompactTextString(m) }
func (*SourceRecordMessage) ProtoMessage()    {}

type Void struct {
}

func (m *Void) Reset()         { *m = Void{} }
func (m *Void) String() string { return proto.CompactTextString(m) }
func (*Void) ProtoMessage()    {}

func init() {
}

// Client API for EventReceiver service

type EventReceiverClient interface {
	Publish(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Void, error)
}

type eventReceiverClient struct {
	cc *grpc.ClientConn
}

func NewEventReceiverClient(cc *grpc.ClientConn) EventReceiverClient {
	return &eventReceiverClient{cc}
}

func (c *eventReceiverClient) Publish(ctx context.Context, in *Events, opts ...grpc.CallOption) (*Void, error) {
	out := new(Void)
	err := grpc.Invoke(ctx, "/notifications.EventReceiver/Publish", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for EventReceiver service

type EventReceiverServer interface {
	Publish(context.Context, *Events) (*Void, error)
}

func RegisterEventReceiverServer(s *grpc.Server, srv EventReceiverServer) {
	s.RegisterService(&_EventReceiver_serviceDesc, srv)
}

func _EventReceiver_Publish_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(Events)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(EventReceiverServer).Publish(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _EventReceiver_serviceDesc = grpc.ServiceDesc{
	ServiceName: "notifications.EventReceiver",
	HandlerType: (*EventReceiverServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Publish",
			Handler:    _EventReceiver_Publish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}
